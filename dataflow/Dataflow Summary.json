{
	"name": "Dataflow Summary",
	"properties": {
		"description": "Dataflow Summary",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DBnycpayroll_2020",
						"type": "DatasetReference"
					},
					"name": "DBPayroll2020"
				},
				{
					"dataset": {
						"referenceName": "DBnycpayroll_2021",
						"type": "DatasetReference"
					},
					"name": "DBPayroll2021"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DBPayrollSummary",
						"type": "DatasetReference"
					},
					"name": "Summary"
				},
				{
					"dataset": {
						"referenceName": "PayrollSummary",
						"type": "DatasetReference"
					},
					"name": "Filesink",
					"rejectedDataLinkedService": {
						"referenceName": "ls_files",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "PayrollData"
				},
				{
					"name": "selectPayroll2020"
				},
				{
					"name": "yearfilter"
				},
				{
					"name": "Derivedcolumns"
				},
				{
					"name": "AggrageTotal"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2020)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DBPayroll2020",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DBPayroll2021",
				"selectPayroll2020, DBPayroll2021 union(byName: true)~> PayrollData",
				"DBPayroll2020 select(mapColumn(",
				"          FiscalYear,",
				"          PayrollNumber,",
				"          AgencyCode = AgencyID,",
				"          AgencyName,",
				"          EmployeeID,",
				"          LastName,",
				"          FirstName,",
				"          AgencyStartDate,",
				"          WorkLocationBorough,",
				"          TitleCode,",
				"          TitleDescription,",
				"          LeaveStatusasofJune30,",
				"          BaseSalary,",
				"          PayBasis,",
				"          RegularHours,",
				"          RegularGrossPaid,",
				"          OTHours,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectPayroll2020",
				"PayrollData filter(toInteger(FiscalYear) >= $dataflow_param_fiscalyear) ~> yearfilter",
				"yearfilter derive(TotalPaid = RegularGrossPaid + TotalOTPaid+TotalOtherPay) ~> Derivedcolumns",
				"Derivedcolumns aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> AggrageTotal",
				"AggrageTotal sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Summary",
				"AggrageTotal sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     mapColumn(",
				"          AgencyName,",
				"          FiscalYear,",
				"          TotalPaid",
				"     )) ~> Filesink"
			]
		}
	}
}